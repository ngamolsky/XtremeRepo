/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UploadRouteImport } from './routes/upload'
import { Route as TeamRouteImport } from './routes/team'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as PhotosRouteImport } from './routes/photos'
import { Route as LegsRouteImport } from './routes/legs'
import { Route as HistoryRouteImport } from './routes/history'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LegsIndexRouteImport } from './routes/legs.index'
import { Route as RunnersRunnerNameRouteImport } from './routes/runners.$runnerName'
import { Route as LegsLegNumberVersionRouteImport } from './routes/legs.$legNumber.$version'

const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamRoute = TeamRouteImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const PhotosRoute = PhotosRouteImport.update({
  id: '/photos',
  path: '/photos',
  getParentRoute: () => rootRouteImport,
} as any)
const LegsRoute = LegsRouteImport.update({
  id: '/legs',
  path: '/legs',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryRoute = HistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LegsIndexRoute = LegsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LegsRoute,
} as any)
const RunnersRunnerNameRoute = RunnersRunnerNameRouteImport.update({
  id: '/runners/$runnerName',
  path: '/runners/$runnerName',
  getParentRoute: () => rootRouteImport,
} as any)
const LegsLegNumberVersionRoute = LegsLegNumberVersionRouteImport.update({
  id: '/$legNumber/$version',
  path: '/$legNumber/$version',
  getParentRoute: () => LegsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/history': typeof HistoryRoute
  '/legs': typeof LegsRouteWithChildren
  '/photos': typeof PhotosRoute
  '/profile': typeof ProfileRoute
  '/team': typeof TeamRoute
  '/upload': typeof UploadRoute
  '/runners/$runnerName': typeof RunnersRunnerNameRoute
  '/legs/': typeof LegsIndexRoute
  '/legs/$legNumber/$version': typeof LegsLegNumberVersionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/history': typeof HistoryRoute
  '/photos': typeof PhotosRoute
  '/profile': typeof ProfileRoute
  '/team': typeof TeamRoute
  '/upload': typeof UploadRoute
  '/runners/$runnerName': typeof RunnersRunnerNameRoute
  '/legs': typeof LegsIndexRoute
  '/legs/$legNumber/$version': typeof LegsLegNumberVersionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/history': typeof HistoryRoute
  '/legs': typeof LegsRouteWithChildren
  '/photos': typeof PhotosRoute
  '/profile': typeof ProfileRoute
  '/team': typeof TeamRoute
  '/upload': typeof UploadRoute
  '/runners/$runnerName': typeof RunnersRunnerNameRoute
  '/legs/': typeof LegsIndexRoute
  '/legs/$legNumber/$version': typeof LegsLegNumberVersionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/history'
    | '/legs'
    | '/photos'
    | '/profile'
    | '/team'
    | '/upload'
    | '/runners/$runnerName'
    | '/legs/'
    | '/legs/$legNumber/$version'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/history'
    | '/photos'
    | '/profile'
    | '/team'
    | '/upload'
    | '/runners/$runnerName'
    | '/legs'
    | '/legs/$legNumber/$version'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/history'
    | '/legs'
    | '/photos'
    | '/profile'
    | '/team'
    | '/upload'
    | '/runners/$runnerName'
    | '/legs/'
    | '/legs/$legNumber/$version'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  HistoryRoute: typeof HistoryRoute
  LegsRoute: typeof LegsRouteWithChildren
  PhotosRoute: typeof PhotosRoute
  ProfileRoute: typeof ProfileRoute
  TeamRoute: typeof TeamRoute
  UploadRoute: typeof UploadRoute
  RunnersRunnerNameRoute: typeof RunnersRunnerNameRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/team': {
      id: '/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/photos': {
      id: '/photos'
      path: '/photos'
      fullPath: '/photos'
      preLoaderRoute: typeof PhotosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legs': {
      id: '/legs'
      path: '/legs'
      fullPath: '/legs'
      preLoaderRoute: typeof LegsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legs/': {
      id: '/legs/'
      path: '/'
      fullPath: '/legs/'
      preLoaderRoute: typeof LegsIndexRouteImport
      parentRoute: typeof LegsRoute
    }
    '/runners/$runnerName': {
      id: '/runners/$runnerName'
      path: '/runners/$runnerName'
      fullPath: '/runners/$runnerName'
      preLoaderRoute: typeof RunnersRunnerNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/legs/$legNumber/$version': {
      id: '/legs/$legNumber/$version'
      path: '/$legNumber/$version'
      fullPath: '/legs/$legNumber/$version'
      preLoaderRoute: typeof LegsLegNumberVersionRouteImport
      parentRoute: typeof LegsRoute
    }
  }
}

interface LegsRouteChildren {
  LegsIndexRoute: typeof LegsIndexRoute
  LegsLegNumberVersionRoute: typeof LegsLegNumberVersionRoute
}

const LegsRouteChildren: LegsRouteChildren = {
  LegsIndexRoute: LegsIndexRoute,
  LegsLegNumberVersionRoute: LegsLegNumberVersionRoute,
}

const LegsRouteWithChildren = LegsRoute._addFileChildren(LegsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  HistoryRoute: HistoryRoute,
  LegsRoute: LegsRouteWithChildren,
  PhotosRoute: PhotosRoute,
  ProfileRoute: ProfileRoute,
  TeamRoute: TeamRoute,
  UploadRoute: UploadRoute,
  RunnersRunnerNameRoute: RunnersRunnerNameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
